@startuml
title Smart Home Control System

skinparam shadowing false
skinparam linetype ortho
skinparam defaultFontName Arial
skinparam classAttributeIconSize 0
skinparam backgroundColor #FFFFFF
skinparam class {
  BackgroundColor #F9FAFB
  BorderColor #94A3B8
}
skinparam interface {
  BackgroundColor #EEF2FF
  BorderColor #6366F1
}
skinparam stereotype {
  C BackgroundColor #DCFCE7
  I BackgroundColor #E0E7FF
  A BackgroundColor #FFE4E6
}

left to right direction

' ==== OBSERVER side ====
interface Observer {
  +update(status: String)
}

interface Subject {
  +attach(o: Observer)
  +detach(o: Observer)
  +notifyObservers()
}

abstract class Device {
  #name: String
  -on: boolean
  -observers: List<Observer>
  +turnOn(): void
  +turnOff(): void
  +getStatus(): String
  +attach(o: Observer): void
  +detach(o: Observer): void
  +notifyObservers(): void
  #setStatus(s: String): void
  #notifyObserversWith(msg: String): void
}

class Light {
  +Light(name: String)
}

class Thermostat {
  -temp: int
  +Thermostat(name: String)
  +setTemperature(t: int): void
}

class Camera {
  +Camera(name: String)
  +startRecording(): void
}

class Dashboard {
  -name: String
  +Dashboard(name: String)
  +update(status: String): void
}

' relationships (Observer pattern)
Subject <|.. Device
Observer <|- Dashboard
Dashboard ..> Device : observes
Device <|-- Light
Device <|-- Thermostat
Device <|-- Camera

' ==== ABSTRACT FACTORY side ====
interface DeviceFactory {
  +createLight(name: String): Device
  +createThermostat(name: String): Device
  +createCamera(name: String): Device
}

class PhilipsFactory {
  +createLight(name: String): Device
  +createThermostat(name: String): Device
  +createCamera(name: String): Device
}

class XiaomiFactory {
  +createLight(name: String): Device
  +createThermostat(name: String): Device
  +createCamera(name: String): Device
}

DeviceFactory <|.. PhilipsFactory
DeviceFactory <|.. XiaomiFactory

' ==== SINGLETON HUB ====
class SmartHomeHub {
  -static instance: SmartHomeHub
  -factories: Map<String, DeviceFactory>
  +getInstance(): SmartHomeHub
  +registerFactory(brand: String, f: DeviceFactory): void
  +createDevice(type: String, brand: String, name: String): Device
}

SmartHomeHub --> DeviceFactory : uses
SmartHomeHub ..> Device : «create»
@enduml